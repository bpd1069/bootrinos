# this installs Alpine Linux from tinycore

# SET THE BOOTRINO ENVIRONMENT VARIABLES
# envvars.sh is generated by bootrino and passed through all boot processes
source /opt/envvars.sh

# this iso should be included in the tinycore package to avoid need for networking
ALPINE_ISO_NAME="alpine-virt-3.4.4-x86_64.iso"

# base directory for running this script
cd /opt

echo bootrino canonical URL: ${BOOTRINO_URL_BASE}
echo alpine linux iso name: ${ALPINE_ISO_NAME}
echo cloud type: ${BOOTRINO_CLOUD_TYPE}

# DOWNLOAD INSTALL FILES UNLESS THEY ARE BAKED IN, AVOIDING NEED FOR NETWORK
#sudo rm /opt/${BOOTRINO_URL_BASE}${ALPINE_ISO_NAME}
#sudo /usr/bin/wget ${BOOTRINO_URL_BASE}${ALPINE_ISO_NAME}
#sudo rm ${BOOTRINO_URL_BASE}amazon.apkovl.tar.gz
#sudo /usr/bin/wget ${BOOTRINO_URL_BASE}amazon.apkovl.tar.gz
#sudo wget http://dl-cdn.alpinelinux.org/alpine/v3.4/releases/x86_64/${ALPINE_ISO_NAME}

if [ ${BOOTRINO_CLOUD_TYPE} == "googlecomputeengine" ]; then
  echo Configure googlecomputeengine....
  DISK_DEVICE_NAME="sda"
fi;

if [ ${BOOTRINO_CLOUD_TYPE} == "amazonwebservices" ]; then
  echo Configure amazonwebservices....
  DISK_DEVICE_NAME="xvda"
fi;

if [ ${BOOTRINO_CLOUD_TYPE} == "digitalocean" ]; then
  echo Configure digitalocean....
  DISK_DEVICE_NAME="vda"
fi;

if [ ${BOOTRINO_CLOUD_TYPE} == "rackspace" ]; then
  echo Configure rackspace....
  DISK_DEVICE_NAME="xvda"
fi;

if [ ${BOOTRINO_CLOUD_TYPE} == "softlayer" ]; then
  echo Configure softlayer....
  DISK_DEVICE_NAME="xvda"
fi;

if mountpoint -q "/mnt/target"; then
    sudo umount /mnt/target
fi

sudo mkdir -p /mnt/target
sudo mount /dev/${DISK_DEVICE_NAME}1 /mnt/target
sudo mkdir -p /mnt/alpineiso
cd /mnt/target

# DELETE EVERYTHING FROM THE OLD DISK EXCEPT THE BOOT DIRECTORY
# move the boot directory off the target disk
sudo cp -r /mnt/target/boot /tmp
# delete everything from the target disk
sudo rm -rf *
#move the boot directory back onto the target disk
sudo cp -r /tmp/boot /mnt/target

# COPY THE ALPINE LINUX FILES FROM THE ISO ONTO THE TARGET DISK
sudo /bin/mount -o loop /opt/${ALPINE_ISO_NAME}  /mnt/alpineiso
sudo cp -av /mnt/alpineiso/boot /mnt/target/.
sudo cp -av /mnt/alpineiso/apks /mnt/target/.
sudo cp /opt/dhclient-4.3.4-r2.apk /mnt/target/apks/x86_64/.

# INSTALL THE ALPINE LINUX CONFIGURATION FILES
#sudo cp -av /opt/bootrino.apkovl.tar.gz /mnt/target/.
sudo cp -av /opt/floob.apkovl.tar.gz /mnt/target/.

# COPY OVER THE NETWORK CONFIG INTERFACES FILE
sudo mkdir /mnt/target/bootrino/
sudo cp -av /etc/network/interfaces /mnt/target/bootrino/.

# COPY OVER THE BOOTRINO ENVIRONMENT VARIABLES SETUP SCRIPT
sudo cp -av /opt/envvars.sh /mnt/target/bootrino/.

# COPY OVER THE POSTBOOT SCRIPT TO GO INTO /etc/local.d
sudo cp -av /opt/bootrino_alpine_postboot.start /mnt/target/bootrino/.

# COPY OVER THE SSHD CONFIG FILE
sudo cp -av /usr/local/etc/ssh/sshd_config /mnt/target/bootrino/.

# MODIFY GRUB TO BOOT ALPINE
cd /mnt/target/boot/
sudo bash -c 'cat > /mnt/target/boot/grub/grub.cfg' << EOF
serial --speed=115200 --word=8 --parity=no --stop=1
terminal_input --append  serial
terminal_output --append serial
set timeout=1
GRUB_TIMEOUT=1
menuentry 'alpine linux 64' {
linux /boot/virtgrsec alpine_dev=${DISK_DEVICE_NAME}:ext4 modules=loop,squashfs,sd-mod,ext4 console=hvc0 pax_nouderef BOOT_IMAGE=/boot/vmlinuz-virtgrsec
initrd /boot/initramfs-virtgrsec
}
EOF
cd /opt


sudo /sbin/reboot

