#!/usr/bin/env sh
# don't crash out if there is an error
set +xe

determine_cloud_type()
{
    # case with wildcard pattern is how to do "endswith" in shell

    SIGNATURE=$(cat /sys/class/dmi/id/sys_vendor)
    case "${SIGNATURE}" in
         "DigitalOcean")
            CLOUD_TYPE="digitalocean"
            ;;
    esac

    SIGNATURE=$(cat /sys/class/dmi/id/product_name)
    case "${SIGNATURE}" in
         "Google Compute Engine")
            CLOUD_TYPE="googlecomputeengine"
            ;;
    esac

    SIGNATURE=$(cat /sys/class/dmi/id/product_version)
    case ${SIGNATURE} in
         *amazon)
            echo Detected cloud Amazon Web Services....
            CLOUD_TYPE="amazonwebservices"
            ;;
    esac

    echo Detected cloud ${CLOUD_TYPE}
}

setup_bootrino_environment_variables()
{
    # allexport ensures exported variables come into current environment
    sudo chmod +x /bootrino/envvars.sh
    set -o allexport
    [ -f /bootrino/envvars.sh ] && . /bootrino/envvars.sh
    set +o allexport
}


configure_network()
{
    if [ "${CLOUD_TYPE}" == "amazonwebservices" ]; then
      echo Configure amazonwebservices....
      # dhcp seems to work properly on AWS so no specific additional network setup needed
    fi;

    if [ "${CLOUD_TYPE}" == "digitalocean" ]; then
    echo Configure digitalocean....
        # if on digitalocean
        #need to install curl for this (curl.tcz into /opt/tce/optional and add curl.tcz to /opt/tce/onboot.lst)
        sudo ifconfig eth0 169.254.1.1 netmask 255.255.0.0
        sudo route add -net 169.254.0.0 netmask 255.255.0.0 dev eth0
        export PUBLIC_IPV4=$(wget -O - http://169.254.169.254/metadata/v1/interfaces/public/0/ipv4/address)
        export NETMASK=$(wget -O - http://169.254.169.254/metadata/v1/interfaces/public/0/ipv4/netmask)
        export GATEWAY=$(wget -O - http://169.254.169.254/metadata/v1/interfaces/public/0/ipv4/gateway)
        sudo ip addr add ${PUBLIC_IPV4}/${NETMASK} dev eth0
        sudo ip route add default via ${GATEWAY}
        # configure name servers
        echo nameserver 8.8.8.8 > /etc/resolv.conf
        echo nameserver 8.8.4.4 >> /etc/resolv.conf
    fi;

    if [ "${CLOUD_TYPE}" == "googlecomputeengine" ]; then
        echo Configure googlecomputeengine....
        /sbin/udhcpc -i eth0 -s /usr/share/udhcpc/default.script -O staticroutes -O msstaticroutes
        ip link set mtu 1460 dev eth0
        # configure name servers
        echo nameserver 8.8.8.8 > /etc/resolv.conf
        echo nameserver 8.8.4.4 >> /etc/resolv.conf
    fi;

    if [ "${CLOUD_TYPE}" == "Xgooglecomputeengine" ]; then
        echo Configure googlecomputeengine....
        sleep 10 # needed?
        sudo mkdir -p /var/db
        sudo touch /var/db/dhclient.leases
        # IMPORTANT! dhclient REQUIRES BASH TO RUN ITS SCRIPTS!
        sudo /usr/local/sbin/dhclient -v -cf /etc/dhcp/dhclient.conf
        echo cat /etc/resolv.conf
        # tinycore default mtu is 1500, Google needs it to be 1460 or ssh won't work
        sudo ip link set mtu 1460 dev eth0
        # configure name servers
        echo nameserver 8.8.8.8 > /etc/resolv.conf
        echo nameserver 8.8.4.4 >> /etc/resolv.conf
    fi;

    echo "Displaying network status...."
    echo cloud type: ${CLOUD_TYPE} > /dev/console
    echo cloud type: ${CLOUD_TYPE} > /dev/tty0
    echo cloud type: ${CLOUD_TYPE} > /dev/tty1
    echo cloud type: ${CLOUD_TYPE} > /dev/ttyS0
    ifconfig -a > /dev/console
    ifconfig -a > /dev/tty0
    ifconfig -a > /dev/tty1
    ifconfig -a > /dev/ttyS0
    route -n > /dev/console
    route -n > /dev/tty0
    route -n > /dev/tty1
    route -n > /dev/ttyS0
    ip addr show > /dev/console
    ip addr show > /dev/tty0
    ip addr show > /dev/tty1
    ip addr show > /dev/ttyS0
}

determine_cloud_type
setup_bootrino_environment_variables
configure_network
